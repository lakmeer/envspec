#!/bin/sh
#
# EnvSpec: make-env
# Version 0.1.0
# October 2022
#
# This file is meant to be committed to your version control system.
# See https://github.com/lakmeer/envspec for updated versions
#
# Unlicense

SPECFILE=./.envspec
ENVFILE=./.env

echo "EnvSpec running..."


# Make sure the envspec file is there

if [ ! -f "$SPECFILE" ]; then
  echo "EnvSpec: ERROR: Could not find .envspec. Stopping."
  exit 1
fi


# If the envfile already exists, make a backup, otherwise create it

if [ -f "$ENVFILE" ]; then
  echo "EnvSpec: Backing up existing .env file to .env.bak"
  mv "$ENVFILE" "$ENVFILE.bak"
fi

touch "$ENVFILE"


# Read out each line (set the IFS delimter to nothing to avoid issues with spaces)

while IFS= read line; do

  # Get number of current line
  LN=$(grep -n "$line" "$SPECFILE" | cut -d: -f1)

  # If the line is blank, make a new blank line in the env
  if [ -z "$line" ]; then
    echo "" >> "$ENVFILE"
  else

    # If the line is a comment, copy the whole line
    if [[ "$line" =~ ^#.* ]]; then
      echo "$line" >> "$ENVFILE"
    else

      # If the line does not contain an =, that's a syntax error
      if [[ ! "$line" =~ = ]]; then
        echo "EnvSpec: ERROR: Malformed key '$KEY' on line $LN: expected '='. Stopping."
        rm $ENVFILE
        exit 1
      fi

      # Split the line on '=' and trim surrounding whitespace with sed
      KEY=$(   echo "$line" | cut -d'=' -f1 | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')
      VALUE=$( echo "$line" | cut -d'=' -f2 | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')

      # Check if the varname is defined in the environment
      if [ -z "${!KEY}" ]; then

        # Bail if it is not, and also the default value is not set
        if [ -z "$VALUE" ]; then
          echo "EnvSpec: ERROR: Expected $KEY in the environment but could not find it. Stopping."
          rm $ENVFILE
          exit 1
        else
          if verbose; then
            echo "EnvSpec: $KEY - Not found, using default value"
          fi
        fi

      else
        if verbose; then
          echo "EnvSpec: $KEY - OK"
        fi

        # Get the value from the environment
        VALUE="${!KEY}"
      fi

      # If the value already has quotes around it, strip them before formatting
      if [[ "$VALUE" =~ ^\".*\"$ ]]; then
        VALUE=$( echo "$VALUE" | sed 's/^"//' | sed 's/"$//' )
      fi

      # Write values to envfile
      echo "$KEY=\"$VALUE\"" >> "$ENVFILE"
    fi

  fi

done < "$SPECFILE"

echo "EnvSpec: Done - $ENVFILE generated."

